---
js: https://dsanson.github.io/carnap-javascript/js/checklist.js?v=13
---

This is a sample file, demonstrating the use of `checklist.js`, a bit of javascript that enables persistent checklists for assigned documents on Carnap: 

<https://github.com/dsanson/carnap-javascript>.

Note that the checklists will only be persistent when this document is made into an actual assignment on Carnap, as the relevant javascript functions are only available for assignments.

# A Canonical Example, Using Raw HTML

Here is a checklist:

<ul>
<li><input type="checkbox" value="syllabus" />
Read the syllabus</li>
<li><input type="checkbox" value="quiz 1" />
Complete the syllabus quiz</li>
<li><input type="checkbox" value="sign up" />
Create an account on Carnap.io</li>
</ul>

Here is the raw html I used for this checklist:

```html
<ul>
<li><input type="checkbox" value="syllabus" />
Read the syllabus</li>
<li><input type="checkbox" value="quiz 1" />
Complete the syllabus quiz</li>
<li><input type="checkbox" value="sign up" />
Create an account on Carnap.io</li>
</ul>
```

Each checkbox is identified by its `value` attribute, and its status is saved
to the Carnap Server, indexed by that attribute. Checkboxes with the same
value attribute are synchronized: 

<ul>
<li><input type="checkbox" value="syllabus" />
This item also has its value set to `syllabus`</li>
</ul>

# Pandoc's `task_lists` Extension

Pandoc supports github style task lists, using the `task_lists` extension. For
example,

```markdown
-   [ ] item 1
-   [ ] item 2
-   [ ] item 3
```

Gets rendered as:

-   [ ] item 1
-   [ ] item 2
-   [ ] item 3

But pandoc does not set `value` attributes for the checkboxes. So these items
won't be saved to the Carnap server.

## Setting the value using spans or links

To get around this, the script will look for `span` elements and links that
have a `value` attribute set, and will use that `value` to identify an item in
the absence of an explicitly set `value` on the `input` element:

```markdown
-   [ ] <span value='item 1'>Item 1</span>
-   [ ] item 2<span value='item 2'></span>
-   [ ] <a href="#" value='item 1'>Item 1 again</a>
```

-   [ ] <span data-value='item 1'>Item 1</span>
-   [ ] item 2<span data-value='item 2'></span>
-   [ ] <a href="#" value='item 1'>Item 1 again</a>

You can also use pandoc's `link_attributes` and `span_attributes` syntax for
this purpose:

```markdown
-   [ ] [Item 2 Again]{value="item 2"}
```

-   [ ] [Item 2 Again]{value="item 2"}

If there are multiple spans are links with the attribute `value` set, the
script will use the first one it finds:

```markdown
-   [ ] [Item 1 Again]{value="item 1"} or [Item 2 Again]{value="item 2"}?
```

-   [ ] [Item 1 Again]{value="item 1"} or [Item 2 Again]{value="item 2"}?

## Falling Back to `href`

It is convenient to generate checklists using pandoc's
`--toc` function, which will generate an unordered list with unique
identifiers for each section header.

For example, here is the table of contents generated by
pandoc for this document (`pandoc --toc -t markdown -s`):

```markdown
-   [A Canonical Example, Using Raw HTML](#a-canonical-example-using-raw-html)
-   [Pandoc's `task_lists` Extension](#pandocs-task_lists-extension)
    -   [Setting the value using spans or
        links](#setting-the-value-using-spans-or-links)
    -   [Falling Back to `href`](#falling-back-to-href)
```

It is easy to turn this into a checklist by adding github style check boxes:

```markdown
-   [ ] [A Canonical Example, Using Raw HTML](#a-canonical-example-using-raw-html)
-   [ ] [Pandoc's `task_lists` Extension](#pandocs-task_lists-extension)
    -   [ ] [Setting the value using spans or
        links](#setting-the-value-using-spans-or-links)
    -   [ ] [Falling Back to `href`](#falling-back-to-href)
```

-   [ ] [A Canonical Example, Using Raw HTML](#a-canonical-example-using-raw-html)
-   [ ] [Pandoc's `task_lists` Extension](#pandocs-task_lists-extension)
    -   [ ] [Setting the value using spans or
        links](#setting-the-value-using-spans-or-links)
    -   [ ] [Falling Back to `href`](#falling-back-to-href)

If the script cannot find any explicit `value` attributes, it will fall back
to using the value of the first `a` element with an `href` as the checkbox
identifier.

Note that this is dangerous, if you might need to edit your document after
you've assigned it. If you change the section headings, and then regenerate
the checklist, some or all of the checkbox identifiers will change, and 


