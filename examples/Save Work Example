---
js: https://carnap.io/shared/dsanson@gmail.com/save-work.js
---

## save-work.js

This is a sample file, demonstrating the use of `save-work.js`, a bit of
javascript that saves student work on Carnap. You can find the script on github:

<https://github.com/dsanson/carnap-javascript>.

I have also uploaded the script as a public document on Carnap. So the
easiest way to use it is to include this in the YAML header of one of
your Carnap assignments:

    ---
    js: https://carnap.io/shared/dsanson@gmail.com/save-work.js
    ---

Note that the script depends on the Carnap server's [AssignmentState
API](https://carnap.io/srv/doc/javascript.md), which only works for
*assignments*. So if you are viewing this page as a shared document that
has not actually been assigned, your work will not be saved.
For a functioning demo, you will need to upload this document to
your own account, and assign it to a course.

## The Basic Idea

By default, Carnap does not save student work. So when a web page is closed,
all the work on that page is lost. But that's not how things should be!
Students should be able to close an assignment and reopen it without losing
all their work.

There are two approaches we could use to solve this problem. First, we can
save student work locally, in their browser cache. This has the benefit that
work will be saved even if their network connection fails. It has the downside
that their work will be tied to a single device. If they start working on a
derivation on their laptop, for example, and then open the assignment on their
phone, their work in progress will not be there on the phone.

Second, we can save student work on the Carnap server. This has the benefit
that work will be available from any device. It has the downside that saving
won't occur in the absence of an internet connection.

Perhaps the best option would be to combine these two approaches, saving both
locally and to the server. But that introduces some serious complications, as
we would need to decide what to do when the two sets of saved data are not in
synch.

This script takes the second approach, saving work to to the Carnap
server.

## When to save and when to load?

As currently implemented, the script saves work in response to three events:

-   When the page visibility becomes 'hidden', in accordance with the [Page
    Visibility API](https://www.w3.org/TR/page-visibility-2/).
-   When the page is closed, via the `beforeunload` event.
-   Whenever an input element becomes unfocused, via `blur` events.

As currently implemented, work is only loaded from the saved data when the
page is first loaded. This means that if a student has the same assignment
open in two tabs, work in the two tabs will not be synchronized.

## Exercise identifiers

Carnap does not provide a unique identifier for exercises. The closest thing
it provides is the exercise label, but more than one exercise can be assigned
the same label. The script identifies exercises by label and type. Exercises
with the same label of the same type are identified by the
order in which they occur.

None of this really matters unless you find yourself tempted to edit a
document after it has been assigned. If you do, here is what you need to know:

-   So long as an exercise retains the same unique-for-its-type label across edits, any saved
    work should be preserved.
-   If you change the label of an exercise, all saved work for that exercise
    will be lost.
-   If you change the label on exercise A to a label that was previously used
    by exercise B, where A and B are exercises of the same type, work saved
    on B will be instead be loaded into A. 
-   If there are several exercises with the same label and of the same type,
    any edit that changes their number or order will confuse the script: work
    saved for what was the nth such exercise will be loaded into what is now
    the nth such exercise.

## Examples

These are examples of a range of different exercises, meant for testing the
script. Again, they will only work if you are viewing the script as an
assignment for a course.

~~~{.Translate .Prop}
1 P/\Q : People want to know what's going on and questions are unavoidable
~~~

~~~{.TruthTable .Simple}
2 ((P/\Q)\/R)<->((P\/R)/\(Q\/R))
~~~

~~~{.ProofChecker .Prop} 
3 P :|-: Q->P
~~~

```{.CounterModeler .Simple}
4 AxF(x), ExG(x)
```

```{.QualitativeProblem .ShortAnswer}
5 How are you feeling today?
```

```{.QualitativeProblem .MultipleChoice}
6 How are you feeling today?
| Good!
| OK!
| Meh.
```

```{.QualitativeProblem .MultipleSelection}
7 How are you feeling today?
| Good!
| OK!
| Meh.
```

```{.QualitativeProblem .Numerical}
8 8 : How many bits in a byte?
```

### Unsupported exercise types

Note that syntax checking problems, sequent calculus problems and
Gentzen-Prawitz deductions are not currently supported.

~~~{.SynChecker .Match} 
9 P /\ Q /\ R
~~~

```{.Sequent .propLK options="displayJSON"}
10 P->Q, Q->R :|-: P->R
```

```{.TreeDeduction .propNK options="displayJSON"}
11 P\/Q, ~P :|-: Q 
```

### Exercises with the same label


Saved work for exercises with the same label but different type should be
persistent across edits that swap their order:

```{.QualitativeProblem .ShortAnswer}
12 How are you feeling today?
```

```{.QualitativeProblem .MultipleChoice}
12 How are you feeling today?
| Good!
| OK!
| Meh.
```

Saved work for exercises with the same label and same type will not be
persistent across edits that swap order:

```{.QualitativeProblem .MultipleChoice}
13 Is the argument valid?
| Yes
| No
```

```{.QualitativeProblem .MultipleChoice}
13 Is the argument valid?
| Yes
| No
```

```{.QualitativeProblem .MultipleChoice}
13 Is the argument valid?
| Yes
| No
```


